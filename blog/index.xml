<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Brandons Blog</title>
    <link>https://brandonsstewart.com/blog/</link>
    <description>Recent content in Blogs on Brandons Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://brandonsstewart.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Protecting Against Command Injection</title>
      <link>https://brandonsstewart.com/blog/protecting-against-command-injection/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://brandonsstewart.com/blog/protecting-against-command-injection/</guid>
      <description>In this post I will to walk through a few areas of the Redmine) application and analyze how the authors of this application protected it against command injection vulnerabilities. I will also provide some general recommendations for how to safely call bash or other system calls in your own code.
What is command injection? Command injection is a type of injection vulnerability which is #1 in the OWASP top 10 vulnerabilities.</description>
    </item>
    
  </channel>
</rss>